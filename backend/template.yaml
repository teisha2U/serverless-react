AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: "SAM template for infrastructure to create serverless architecture"
Parameters:
  Application:
    Description: What app is this for
    Type: String
    Default: "serverless"
  ProjectName:
    Description: Name of the project, so I can see what these things are
    Type: String
    Default: "demo"
  Environment:
    Type: String
    Description: Environment being deployed

Globals:
  Function:
    Timeout: 10
    MemorySize: 1024
    CodeUri: .
    Environment:
      Variables:
        LOGGING_LEVEL: "INFO"
        DYNAMO_TABLE:
          Ref: DataTable
Resources:
  DataTable:
    Type: "AWS::DynamoDB::Table"
    DeletionPolicy: Retain
    Properties:
      TableName: !Sub ${ProjectName}-table #Single table design - structures handled in code
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
        # - AttributeName: start
        #   AttributeType: S
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      GlobalSecondaryIndexes:
        - IndexName: GSI1
          KeySchema:
            - AttributeName: SK
              KeyType: HASH
            - AttributeName: PK
              KeyType: RANGE
          Projection:
            ProjectionType: ALL

  Api:
    Type: AWS::Serverless::Api
    Properties:
      StageName:
        Ref: ProjectName
      Cors:
        AllowMethods: "'OPTIONS,POST,GET,PUT,DELETE'"
        AllowHeaders: "'Content-Type,Authorization'"
        AllowOrigin: "'*'"
      GatewayResponses:
        MISSING_AUTHENTICATION_TOKEN:
          StatusCode: 401
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: "'*'"
        UNAUTHORIZED:
          StatusCode: 401
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: "'*'"
        ACCESS_DENIED:
          StatusCode: 403
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: "'*'"
        DEFAULT_5XX:
          StatusCode: 500
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: "'*'"
        RESOURCE_NOT_FOUND:
          StatusCode: 404
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: "'*'"

      Auth:
        DefaultAuthorizer: CognitoAuth
        Authorizers:
          CognitoAuth:
            UserPoolArn: !GetAtt CognitoUserPool.Arn
        AddDefaultAuthorizerToCorsPreflight: False

  UserApiHandler:
    Type: "AWS::Serverless::Function"
    Properties:
      Handler: dist/index.userHandler
      Runtime: nodejs18.x
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - "dynamodb:Query"
                - "dynamodb:GetItem"
                - "dynamodb:PutItem"
                - "dynamodb:DeleteItem"
              Resource:
                - "Fn::GetAtt":
                    - DataTable
                    - Arn
                - "Fn::Join":
                    - /
                    - - "Fn::GetAtt":
                          - DataTable
                          - Arn
                      - index
                      - startIndex
      Events:
        GetUser:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: "/users/{username}"
            Method: GET
        PutUser:
          #add or update user
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: "/users/{username}"
            Method: POST

  ###
  ###  Security
  ###

  CognitoUserPool:
    Type: "AWS::Cognito::UserPool"
    Properties:
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: true
      MfaConfiguration: "OFF"
      UserPoolName: !Sub ${ProjectName}-user-pool
  CognitoFrontEndClient:
    Type: "AWS::Cognito::UserPoolClient"
    Properties:
      ClientName: !Sub ${ProjectName}-client
      GenerateSecret: false
      UserPoolId:
        Ref: CognitoUserPool
      SupportedIdentityProviders:
        - COGNITO
      AllowedOAuthFlows:
        - implicit
      AllowedOAuthScopes:
        - email
        - openid
        - profile
      CallbackURLs: # Url Cognito will forward to after auth - remove the localhost for prod app
        - http://localhost:4000/auth
        - !Sub https://${ClientCloudFrontDistro.DomainName}/auth
      LogoutURLs:
        - http://localhost:4000
        - !Sub https://${ClientCloudFrontDistro.DomainName}
      AllowedOAuthFlowsUserPoolClient: true
  CognitoDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Sub ${ProjectName}
      UserPoolId: !Ref CognitoUserPool
  ClientHostBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls : true
        BlockPublicPolicy : true
        IgnorePublicAcls : true
        RestrictPublicBuckets : true
  ClientHostLoggingBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls : true
        BlockPublicPolicy : true
        IgnorePublicAcls : true
        RestrictPublicBuckets : true 
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
    DeletionPolicy: Delete       
  ClientBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: ClientHostBucket
      PolicyDocument:
        Id: AllowCloudFrontAccess
        Statement:
          - Action:
              - "s3:GetObject*"
            Effect: "Allow"
            Resource: !Sub ${ClientHostBucket.Arn}/*
            Principal:
              Service: "cloudfront.amazonaws.com"
            Condition:
              StringEquals:
                AWS:SourceArn:
                  Fn::Join:
                    - ""
                    - - "arn:aws:cloudfront::"
                      - Ref: AWS::AccountId
                      - ":distribution/"
                      - Ref: ClientCloudFrontDistro
  # Front End server
  ClientCloudFrontDistro:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        CustomErrorResponses: # Application will deal with auth failures
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
        DefaultCacheBehavior:
          ForwardedValues:
            QueryString: "true"
          TargetOriginId: !Sub ${ProjectName}-origin-dist
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6 # CachingOptimized
          OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf # CORS-S3Origin
          ResponseHeadersPolicyId: 67f7725c-6f97-4210-82d7-5512b31e9d03 # SecurityHeadersPolicy
          ViewerProtocolPolicy: redirect-to-https
        DefaultRootObject: index.html
        Enabled: "true"
        Origins:
          - DomainName: !GetAtt ClientHostBucket.RegionalDomainName
            Id: !Sub ${ProjectName}-origin-dist
            S3OriginConfig:
              OriginAccessIdentity: ""
            OriginAccessControlId: !GetAtt ClientOAC.Id
        ViewerCertificate:
          CloudFrontDefaultCertificate: "true"
        Logging:
          Bucket: !GetAtt ClientHostLoggingBucket.RegionalDomainName
          Prefix: 'cloudfront-access-logs'          
  ClientOAC:
    Type: AWS::CloudFront::OriginAccessControl
    DependsOn:
      - ClientHostBucket
    Properties: 
      OriginAccessControlConfig:
        Description: S3 Origin Access Control For CloudFront
        Name: !Ref AWS::StackName
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

Outputs:
  CogntioRedirectUri:
    Description: Redirect URI to front end from Cognito User Pool
    Value: !Sub https://${ClientCloudFrontDistro.DomainName}/auth
  CognitoClientId:
    Description: Cognito client ID
    Value: !Ref CognitoFrontEndClient
  CognitoDomain:
    Description: Cogntio Domain
    Value: !Sub ${ProjectName}
  BackendUrl:
    Description: API Gateway backend URL
    Value: !Sub "https://${Api}.execute-api.${AWS::Region}.amazonaws.com/${ProjectName}/"
  HostBucket:
    Description: S3 bucket created to hold frontend.
    Value: !Ref ClientHostBucket
  CognitoDistributionId:
    Description: The ID of the Cloudfront Distribution used to invalidate front end after deploy
    Value: !Ref ClientCloudFrontDistro
  TableName:
    Description: The name of the table
    Value: !Ref DataTable
